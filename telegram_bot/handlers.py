import pandas as pd
from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from services import (
    get_all_tickers,
    get_or_create_user,
    add_ticker_to_user,
    delete_ticker_from_user,
    get_user_tickers, Stock, get_ticker_summary, get_ticker_most_resonance, get_an_interpretation,
    get_weekly_summary_and_interpretation
)

router = Router()

# –û–±—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
WELCOME_TEXT = (
    "üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å, {username}!\n\n"
    "üìä –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
    "‚Ä¢ /broadcast - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∞–∫—Ü–∏–∏\n"
    "‚Ä¢ /summary - –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é\n"
    "‚Ä¢ /ticker - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–∏–∫–µ—Ä—É\n\n"
    "–ù–∞—á–Ω–∏—Ç–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!"
)

SUBSCRIPTION_MANAGEMENT_TEXT = "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:"
CLOSE_TEXT = "üîí –ó–∞–∫—Ä—ã—Ç—å"
SUBSCRIPTION_ERROR = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏!"
UNSUBSCRIPTION_ERROR = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏!"


@router.message(Command("start"))
async def start_command(message: Message):
    user = message.from_user
    await get_or_create_user(user.id, user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    await message.answer(WELCOME_TEXT.format(username=user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))


async def build_subscription_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        all_tickers = [t["ticker"] for t in (await get_all_tickers())["tickers"]]
        all_user_tickers = await get_user_tickers(user_id)
        user_tickers = [el['ticker'] for el in all_user_tickers]
        print(f'\t{user_tickers = }')
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤
        for ticker in all_tickers:
            is_subscribed = ticker in user_tickers
            button_text = f"‚úÖ {ticker}" if is_subscribed else ticker
            action = "unsubscribe" if is_subscribed else "subscribe"
            builder.button(text=button_text, callback_data=f"{action}:{ticker}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        builder.button(text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", callback_data="error")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    builder.button(text=CLOSE_TEXT, callback_data="close")
    builder.adjust(2, repeat=True)
    return builder.as_markup()


@router.message(Command("broadcast"))
async def manage_subscriptions(message: Message):
    user = message.from_user
    await get_or_create_user(user.id, user.username or "")

    try:
        keyboard = await build_subscription_keyboard(user.id)
        await message.answer(SUBSCRIPTION_MANAGEMENT_TEXT, reply_markup=keyboard)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: {e}")
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")


async def update_subscription_message(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        keyboard = await build_subscription_keyboard(callback.from_user.id)
        await callback.message.edit_text(
            text=SUBSCRIPTION_MANAGEMENT_TEXT,
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        await callback.answer("üö´ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
    finally:
        await callback.answer()


@router.callback_query(F.data.startswith("subscribe:"))
async def subscribe_ticker(callback: CallbackQuery):
    ticker = callback.data.split(":", 1)[1]
    if await add_ticker_to_user(callback.from_user.id, ticker):
        await update_subscription_message(callback)
    else:
        await callback.answer(SUBSCRIPTION_ERROR, show_alert=True)


@router.callback_query(F.data.startswith("unsubscribe:"))
async def unsubscribe_ticker(callback: CallbackQuery):
    ticker = callback.data.split(":", 1)[1]
    if await delete_ticker_from_user(callback.from_user.id, ticker):
        await update_subscription_message(callback)
    else:
        await callback.answer(UNSUBSCRIPTION_ERROR, show_alert=True)


@router.callback_query(F.data == "close")
async def close_subscriptions(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç—ã")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥


@router.message(Command("ticker"))
async def ticker_command(message: Message):
    all_tickers = [t["ticker"] for t in (await get_all_tickers())["tickers"]]
    builder = InlineKeyboardBuilder()
    for ticker in all_tickers:
        builder.button(text=ticker, callback_data=f'ticker_analytics:{ticker}')
    builder.adjust(2)

    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('ticker_analytics'))
async def ticker_analytics(callback: CallbackQuery):
    ticker = callback.data.split(':', maxsplit=1)[1]

    stock = Stock(ticker)

    msg = await callback.message.answer(text='–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫...')
    plot_bytes = stock.build_plot(sentiment_data=pd.DataFrame({'date': [], 'sentiment_value': []}))
    await msg.delete()
    photo = BufferedInputFile(plot_bytes, filename=f"{ticker}_chart.png")
    caption = f'–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ü–∏–∏ {ticker}'
    await callback.message.answer_photo(
        photo=photo,
        caption=caption,
        parse_mode=ParseMode.HTML,
    )

    msg = await callback.message.answer(text='–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏...')
    ticker_summary = await get_ticker_summary(ticker=ticker)
    await callback.message.answer(text=f'–°–∞–º–º–∞—Ä–∏:\n\n{ticker_summary}')
    await msg.delete()

    msg = await callback.message.answer(text='–ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...')
    ticker_most_resonance = await get_ticker_most_resonance(ticker=ticker, limit=5)

    resonanse_text = '–¢–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç—É –∏ –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º:\n\n'
    for i, resonanse in enumerate(ticker_most_resonance):
        resonanse_text += (f'{i + 1}) {resonanse.source.upper()}\n\t{resonanse.text[:100]}... ({resonanse.url})'
                           f'\n\t–°–µ–Ω—Ç–∏–º–µ–Ω—Ç: {resonanse.sentiment:0.1f}, '
                           f'\n\t–ü–æ–∏—Å–∫–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: {resonanse.search_index:0.1f}\n\n')

    await callback.message.answer(text=resonanse_text)
    await msg.delete()
    msg = await callback.message.answer(text='–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º...')
    interpretation = await get_an_interpretation(summary=ticker_summary, resonance=resonanse_text)
    await msg.delete()
    await callback.message.answer(text=f'–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è: {interpretation.think}\n\n–ò—Ç–æ–≥: {interpretation.answer}')


@router.message(Command("summary"))
async def summary_command(message: Message):
    await message.answer("üìà –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é:")
    summary, interpretation = await get_weekly_summary_and_interpretation()

    await message.answer(text=f'–°–∞–º–º–∞—Ä–∏: {summary}')
    await message.answer(text=f'–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:\n–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è: {interpretation.think}\n\n–ò—Ç–æ–≥: {interpretation.answer}')

