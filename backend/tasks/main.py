import requests
from bs4 import BeautifulSoup
import sqlite3
import schedule
import time
import logging
from telegram import Bot, Update
from telegram.ext import Updater, CommandHandler, CallbackContext
import joblib  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ ML-–º–æ–¥–µ–ª–∏

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
NEWS_SOURCES = [
    "https://example.com/news/rss",
    "https://anotherexample.org/feed"
]
DB_NAME = "news_bot.db"
CHECK_INTERVAL = 5  # –º–∏–Ω—É—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)



# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (chat_id INTEGER PRIMARY KEY, username TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS sent_news
                 (news_id TEXT PRIMARY KEY)''')  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    conn.commit()
    conn.close()


def add_user(chat_id, username):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users VALUES (?, ?)", (chat_id, username))
    conn.commit()
    conn.close()


def get_all_users():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT chat_id FROM users")
    users = [row[0] for row in c.fetchall()]
    conn.close()
    return users


def mark_as_sent(news_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO sent_news VALUES (?)", (news_id,))
    conn.commit()
    conn.close()


def is_already_sent(news_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT 1 FROM sent_news WHERE news_id=?", (news_id,))
    exists = c.fetchone() is not None
    conn.close()
    return exists


# –ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
def parse_news(source):
    try:
        response = requests.get(source, timeout=10)
        soup = BeautifulSoup(response.content, 'xml')
        news_items = []

        for item in soup.find_all('item'):
            title = item.title.text.strip()
            link = item.link.text.strip()
            description = item.description.text.strip() if item.description else ""

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            news_id = f"{source}-{hash(link)}"

            news_items.append({
                'id': news_id,
                'title': title,
                'text': f"{title}\n{description}",
                'link': link
            })
        return news_items
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {source}: {str(e)}")
        return []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    add_user(user.id, user.username)
    update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç {user.first_name}! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.")


# –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
def send_news_to_users(news_item):
    bot = Bot(token=TOKEN)
    users = get_all_users()
    message = f"üö® –í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å! üö®\n\n{news_item['title']}\n\n{news_item['link']}"

    for chat_id in users:
        try:
            bot.send_message(chat_id=chat_id, text=message)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {chat_id}: {str(e)}")


# –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def monitoring_task():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    model = NewsScoringModel()

    for source in NEWS_SOURCES:
        news_items = parse_news(source)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π –≤ {source}")

        for item in news_items:
            if is_already_sent(item['id']):
                continue

            score = model.predict(item['text'])
            if score > 0.05:
                logger.info(f"–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å! –°–∫–æ—Ä: {score:.4f} - {item['title']}")
                send_news_to_users(item)
                mark_as_sent(item['id'])


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
def main():
    init_db()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    updater.start_polling()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    schedule.every(CHECK_INTERVAL).minutes.do(monitoring_task)
    logger.info(f"–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} –º–∏–Ω—É—Ç.")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        schedule.run_pending()
        time.sleep(1)


if __name__ == "__main__":
    main()